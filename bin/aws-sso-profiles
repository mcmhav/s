#!/usr/bin/env bash

AWS_HOME="$HOME/.aws"
AWS_CONFIG_FILE="$AWS_HOME/config"
export AWS_PROFILE=$(grep "\[" <"$AWS_CONFIG_FILE" | sed 's|\[profile ||g' | sed 's|\]||g' | head -n 1)
AWS_SSO_CACHE="$AWS_HOME/sso/cache"
BOOTSTRAP_FILE="$CSYS_BASHRC_D/bootstrap"
AWS_SSO_START_URL=""
AWS_SSO_ROLE_NAME=""
_bootstrap() {
  if [ -f "$BOOTSTRAP_FILE" ]; then
    AWS_SSO_START_URL=$(grep sso_start_url <"$BOOTSTRAP_FILE" | awk '{print $3}')
    AWS_SSO_ROLE_NAME=$(grep sso_role_name <"$BOOTSTRAP_FILE" | awk '{print $3}')
    return
  fi

  AWS_SSO_START_URL=$(grep -m 1 sso_start_url <"$AWS_CONFIG_FILE" | awk '{print $3}')
  AWS_SSO_ROLE_NAME=$(grep -m 1 sso_role_name <"$AWS_CONFIG_FILE" | awk '{print $3}')
  if [ -z "$AWS_SSO_START_URL" ] || [ -z "$AWS_SSO_ROLE_NAME" ]; then
    loggit errr "Did not manage to bootstrap, exiting"
    exit 1
  fi
}
_bootstrap
AWS_REGION="eu-north-1"

AWS_SSO_SESSION="$AWS_SSO_CACHE/$(ls -Art "$AWS_SSO_CACHE" | tail -n 1)"

IS_SESSION_OLD=$(jq '.expiresAt < now' <"$AWS_SSO_SESSION")
if [ "$IS_SESSION_OLD" == "true" ]; then
  AWS_CONFIG_FILE=$BOOTSTRAP_FILE AWS_PROFILE=bootstrap aws sso login
  AWS_SSO_SESSION="$AWS_SSO_CACHE/$(ls -Art "$AWS_SSO_CACHE" | tail -n 1)"
fi

AWS_ACCESS_TOKEN=$(jq -r '.accessToken' <"$AWS_SSO_SESSION")
ACCOUNTS=$(aws sso list-accounts --access-token "$AWS_ACCESS_TOKEN")
ACCOUNTS_LENGTH=$(jq -r '.accountList | length - 1' <<<"$ACCOUNTS")
if [ -z "$ACCOUNTS_LENGTH" ]; then
  loggit errr "No accounts found"
  exit 1
fi

_create_profile_element() {
  ROLE="$1"
  ACCOUNT_NAME="$2"
  ROLE_NAME="$(jq -r '.roleName' <<<"$ROLE")"
  ACCOUNT_ID="$(jq -r '.accountId' <<<"$ROLE")"
  if [ -z "$ACCOUNT_NAME" ] || [ -z "$ROLE_NAME" ]; then
    return
  fi
  echo "[profile $ACCOUNT_NAME/$ROLE_NAME]"
  echo "sso_start_url  = $AWS_SSO_START_URL"
  echo "sso_account_id = $ACCOUNT_ID"
  echo "sso_role_name  = $ROLE_NAME"
  echo "sso_region     = $AWS_REGION"
  echo "region         = $AWS_REGION"
  echo ""
}

rm -f "$AWS_CONFIG_FILE.tmp"
touch "$AWS_CONFIG_FILE.tmp"
for i in $(seq 0 "$ACCOUNTS_LENGTH"); do
  ACCOUNT_ID=$(jq --argjson i "$i" -r '.accountList[$i].accountId' <<<"$ACCOUNTS")
  ACCOUNT_NAME=$(jq --argjson i "$i" -r '.accountList[$i].accountName' <<<"$ACCOUNTS")
  loggit "Handling: $ACCOUNT_NAME"
  (
    ROLES=$(aws sso list-account-roles --access-token "$AWS_ACCESS_TOKEN" --account-id "$ACCOUNT_ID" | jq '.roleList')
    for j in $(seq 0 "$(jq 'length -1' <<<"$ROLES")"); do
      ROLE="$(jq --argjson j "$j" '.[$j]' <<<"$ROLES")"
      loggit "Handling: $(jq -r '.roleName' <<<"$ROLE")"
      _create_profile_element "$ROLE" "$ACCOUNT_NAME" >>"$AWS_CONFIG_FILE.tmp"
    done
  )
done

while [ "$(grep "profile.*\/$AWS_SSO_ROLE_NAME" -c <"$AWS_CONFIG_FILE.tmp")" -lt "$ACCOUNTS_LENGTH" ]; do
  sleep 1
done

mv "$AWS_CONFIG_FILE.tmp" "$AWS_CONFIG_FILE"
